<?php

defined('_JEXEC') or die;
jimport('joomla.user.helper');
jimport('joomla.application.component.modeladmin');

class Membership_directoryModelImport extends JModelAdmin {

    /**
     * @var		string	The prefix to use with controller messages.
     * @since	1.6
     */
    protected $text_prefix = 'COM_MEMBERSHIP_DIRECTORY';

    /**
     * Returns a reference to the a Table object, always creating it.
     *
     * @param	type	The table type to instantiate
     * @param	string	A prefix for the table class name. Optional.
     * @param	array	Configuration array for model. Optional.
     * @return	JTable	A database object
     * @since	1.6
     */
    public function getTable($type = 'Import', $prefix = 'Membership_directoryTable', $config = array()) {
        return JTable::getInstance($type, $prefix, $config);
    }

    /**
     * Method to get the record form.
     *
     * @param	array	$data		An optional array of data for the form to interogate.
     * @param	boolean	$loadData	True if the form is to load its own data (default case), false if not.
     * @return	JForm	A JForm object on success, false on failure
     * @since	1.6
     */
    public function getForm($data = array(), $loadData = true) {
        // Initialise variables.
        $app = JFactory::getApplication();

        // Get the form.
        $form = $this->loadForm('com_membership_directory.import', 'import', array('control' => 'jform', 'load_data' => $loadData));
        if (empty($form)) {
            return false;
        }
        return $form;
    }

    /**
     * Method to get the data that should be injected in the form.
     *
     * @return	mixed	The data for the form.
     * @since	1.6
     */
    protected function loadFormData() {
        // Check the session for previously entered form data.
        $data = JFactory::getApplication()->getUserState('com_membership_directory.edit.import.data', array());

        if (empty($data)) {
            $data = $this->getItem();
        }

        return $data;
    }

    public function getTextFromCell($form_name) {
        if (is_object($form_name->getValue())) { // if the field happens to contain richtext
            //    $objRichText = new PHPExcel_RichText($objPHPExcel->getActiveSheet()->getCell('B' . $i));
//            $objRichText = new PHPExcel_RichText($form_name);
//                       
//
//            $elements = $objRichText->getRichTextElements();
//
//            $objRichText2 = $elements[0]->getText(); // judging from the $objRichtText->PlainText method, this should have the plaintext, but instead it is another object, so we need to get the rich text elements again
//
//            $elements2 = $objRichText2->getRichTextElements();
//
//            $returnValue = "";
//
//            foreach ($elements2 as $text) {
//                $returnValue .= $text->getText();
//            }
            return $form_name->getValue()->getPlainText();
            // $form_name = $returnValue; // this has the plaintext now
        } else {
            return $form_name->getValue();
        }
    }

    public function process($path) {
        require_once 'PHPExcel.php';
        require_once 'PHPExcel/IOFactory.php';
        $objPHPExcel = PHPExcel_IOFactory::load($path);
        foreach ($objPHPExcel->getWorksheetIterator() as $worksheet) {
            $worksheetTitle = $worksheet->getTitle();
            $highestRow = $worksheet->getHighestRow(); // e.g. 10
            $highestColumn = $worksheet->getHighestColumn(); // e.g 'F'
            $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);
        }
        $nrColumns = ord($highestColumn) - 64;
        $header = array();
        $skippedRows = 0;
        $processedRecords = 0;
        $count_insert = 0;
        $count_update = 0;

        for ($row = 1; $row <= $highestRow; ++$row) {
            $val = array();
            if ($row == 1) {
                for ($col = 0; $col < $highestColumnIndex; ++$col) {
                    $cell = $worksheet->getCellByColumnAndRow($col, $row);
                    $header[] = $this->getTextFromCell($cell);
                }
            } else {
                for ($col = 0; $col < $highestColumnIndex; ++$col) {
                    $cell = $worksheet->getCellByColumnAndRow($col, $row);
                    $val[$header[$col]] = $this->getTextFromCell($cell);
                }
                if ($val['Email']) {
                    if ($this->isExistedEmail($val['Email'])) {
                        $member_id = $this->updateMemberByEmail($val);
                        $this->updateUserByMemberId($val, $member_id);
                        $count_update++;
                    } else {
                        $memberId = $this->saveMember($val);
                        $this->saveUser($val, $memberId);
                        $count_insert++;
                    }
                } else {
                    $skippedRows++;
                }
                $processedRecords++;
            }
        }
        if ($skippedRows > 0) {
            JError::raiseNotice(100, 'Skip ' . $skippedRows . ' rows because the emails may be blank ');
        }
        JFactory::getApplication()->enqueueMessage('Proccess ' . $processedRecords . ' records!');
        if ($count_update > 0) {
            JFactory::getApplication()->enqueueMessage('Update ' . $count_update . ' records successfully');
        }
        if ($count_insert > 0) {
            JFactory::getApplication()->enqueueMessage('Insert ' . $count_insert . ' records successfully');
        }

        return true;
    }

    public function updateUserByMemberId($data, $member_id) {
        $db = JFactory::getDbo();
        $query = $db->getQuery(true);
        $name = $data ['First Name'] . " " . $data ['Last Name'];
        //$username = $this->createUserName($data, $member_id);
        $email = $data ['Email'];
        $datetime = date('Y-m-d H:i:s');
        /* password */
        $salt = JUserHelper::genRandomPassword(32);
        $crypt = JUserHelper::getCryptedPassword($data ["pass"], $salt);
        $pass = $crypt . ':' . $salt;
        $fields = array(
            $db->quoteName('name') . "='" . $name . "'",
           // $db->quoteName('username') . "='" . $username . "'",
            $db->quoteName('email') . "='" . $email . "'",
            $db->quoteName('password') . "='" . $pass . "'",
            $db->quoteName('registerDate') . "='" . $datetime . "'"
        );
        $conditions = array(
            $db->quoteName('membership_id') . "='" . $member_id . "'"
        );
        $query->update($db->quoteName('#__users'))->set($fields)->where($conditions);
        $db->setQuery($query);
        $result = $db->query();
    }

    public function updateMemberByEmail($data) {
        $db = JFactory::getDbo();
        $member = new stdClass();
        $member->size_of_company = $data["Size of Company"];
        $member->year_joined = $data["Year Joined"];
        $member->dues_2014 = $data["2014 Dues"];
        $member->dues_2013 = $data["2013 Dues"];
        $member->desingated_rep = ($data["Desingated Rep?"] == "1" ? "True" : "False");
//        $member->desingated_rep = $data["Desingated Rep?"];
        $member->new_2013 = ($data["New 2013"] == "yes" ? "True" : "False");
        $member->new_2014 = ($data["New 2014"] == "yes" ? "True" : "False");
        $member->term_expires = $data["Term Expires"];
        $member->board_position = $data["Board Position"];
        $member->business_category = $data["Business Category"];
        $member->paid_2013 = ($data["Paid 2013"] == "yes" ? "True" : "False");
//        $member->business_directory=$data["Size of Company"];
        $member->company = $data["Company"];
        $member->address = $data["Address"];
        $member->city_state_zip = $data["City State Zip"];
        $member->first_name = $data["First Name"];
        $member->last_name = $data["Last Name"];
        $member->job_title = $data["Job Title"];
        $member->email = $data["Email"];
        $member->website = $data["Website"];
        $member->phone = $data["Phone"];
        $member->cell = $data["Cell"];
        $member->fax = $data["Fax"];
        $member->contact = $data["A/P Contact"];
        $member->ap_email = $data["A/P Email"];
        //$member->description = $data["Company Description"];
        $member->description = $data["NEW descriptions (2014)"];
        $member->referred_by = $data["Referred By"];
        $member->pass = $data["pass"];
        //get id from existing member
        $query = $db->getQuery(true);

        $query->select('*')
                ->from("jos_membership_directory")
                ->where("email=" . $db->quote($data["Email"]));
        $db->setQuery($query);
        $member_id = $db->loadObject()->id;
        $member->id = $member_id;
        try {
            $result = $db->updateObject("jos_membership_directory", $member, "id");
            //$id = $db->insertid();
        } catch (Exception $e) {
            JFactory::getApplication()->enqueueMessage('Error on adding new member');
            $member_id = false;
        }
        return $member_id;
    }

    public function updateMemberByRecordId($data) {
        $db = JFactory::getDbo();
        $member = new stdClass();
        $member->id = $data["Record #"];
        $member->size_of_company = $data["Size of Company"];
        $member->year_joined = $data["Year Joined"];
        $member->dues_2014 = $data["2014 Dues"];
        $member->dues_2013 = $data["2013 Dues"];
        $member->desingated_rep = ($data["Desingated Rep?"] == "1" ? "True" : "False");
        $member->new_2013 = ($data["New 2013"] == "yes" ? "True" : "False");
        $member->new_2014 = ($data["New 2014"] == "yes" ? "True" : "False");
        $member->term_expires = $data["Term Expires"];
        $member->board_position = $data["Board Position"];
        $member->business_category = $data["Business Category"];
        $member->paid_2013 = ($data["Paid 2013"] == "yes" ? "True" : "False");
        $member->company = $data["Company"];
        $member->address = $data["Address"];
        $member->city_state_zip = $data["City State Zip"];
        $member->first_name = $data["First Name"];
        $member->last_name = $data["Last Name"];
        $member->job_title = $data["Job Title"];
        $member->email = $data["Email"];
        $member->website = $data["Website"];
        $member->phone = $data["Phone"];
        $member->cell = $data["Cell"];
        $member->fax = $data["Fax"];
        $member->contact = $data["A/P Contact"];
        $member->ap_email = $data["A/P Email"];
        $member->description = $data["NEW descriptions (2014)"];
        $member->referred_by = $data["Referred By"];
        $member->pass = $data["pass"];
        $member_id = $data["Record #"];
        try {
            $result = $db->updateObject("jos_membership_directory", $member, "id");
            //$id = $db->insertid();
        } catch (Exception $e) {
            JFactory::getApplication()->enqueueMessage('Error on adding new member');
            $member_id = false;
        }
        return $member_id;
    }

    public function validate($file) {
        require_once 'PHPExcel.php';
        require_once 'PHPExcel/IOFactory.php';

        $objPHPExcel = PHPExcel_IOFactory::load($file);
        foreach ($objPHPExcel->getWorksheetIterator() as $worksheet) {
            $worksheetTitle = $worksheet->getTitle();
            $highestRow = $worksheet->getHighestRow(); // e.g. 10
            $highestColumn = $worksheet->getHighestColumn(); // e.g 'F'
            $highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);
        }
        $nrColumns = ord($highestColumn) - 64;
        $header = array();
        for ($row = 1; $row <= 1; ++$row) {
            $val = array();
            for ($col = 0; $col < $highestColumnIndex; ++$col) {
                $cell = $worksheet->getCellByColumnAndRow($col, $row);
                $headerLabel = $cell->getValue();
                $header[] = $headerLabel;
            }
        }
        $sample = array(
            "Company",
            "Size of Company",
            "Year Joined",
            "Prev Member?",
            "Paid 2013",
            "Paid 2014",
            "2013 Dues",
            "2014 Dues",
            "Desingated Rep?",
            "New 2014",
            "New 2013",
            "Term Expires",
            "Board Position",
            "Business Category",
            "Address",
            "City State Zip",
            "First Name",
            "Last Name",
            "Job Title",
            "Website",
            "Email",
            "Phone",
            "Cell",
            "Fax",
            "A/P Contact",
            "A/P Email",
            "NEW descriptions (2014)",
            "Referred By",
            "pass",
            "Record #",
        );
        $array_dff = array_diff($sample, $header);
        if (sizeof($array_dff) > 0) {
            JError::raiseWarning(100, 'Missing fields on uploaded spreadsheet (' . implode(',', $array_dff) . ')');
            return false;
        }

        return true;
    }

    public function createUserName($data, $memberId) {
        $username = false;
//        if ($data['Last Name']) { 
//            $username = strtolower($data['Last Name']) . $memberId;
//        } else {
//            $username = $memberId;
//        }
        if ($data['Email']) {
            $username = strtolower($data['Email']);
        } else {
            $username = 'member'.$memberId;
        }
        return $username;
    }

    public function saveUser($data, $memberId) {
        $first_name = $data ['First Name'];
        $last_name = $data ['Last Name'];
        $name = $first_name . " " . $last_name;
//        if (strlen(trim($name)) == 0) {
//            $name = $this->createUserName($data, $memberId);
//        }
        $email = $data ['Email'];
//        if(!$email){
//            $email=  $this->createUserName($data, $memberId). "@email.com";
//        }
        $datetime = date('Y-m-d H:i:s');
        /* password */
        $salt = JUserHelper::genRandomPassword(32);
        $crypt = JUserHelper::getCryptedPassword($data ["pass"], $salt);
        $pass = $crypt . ':' . $salt;

        // ////////////////////////////////////////////////////////////
        $db = JFactory::getDbo();
        // Create and populate an object.
        $insert = new stdClass ();
        $insert->id = '';
        $insert->name = $name;
        $insert->username = $email;
        $insert->email = $email;
        $insert->password = $pass;
        $insert->usertype = '';
        $insert->block = '';
        $insert->sendEmail = '';
        $insert->registerDate = $datetime;
        $insert->lastvisitDate = '';
        $insert->activation = '';
        $insert->params = '';
        $insert->button = '';
        $insert->membership_id = $memberId;
        try {
            $result = $db->insertObject('#__users', $insert);
            $user_id = $db->insertid();
            JUserHelper::addUserToGroup($user_id, 14);
        } catch (Exception $e) {
            echo "Insert Fail!!!";
        }

        return $user_id;
    }

    public function saveMember($data) {
        $db = JFactory::getDbo();
        $member = new stdClass();
        $member->size_of_company = $data["Size of Company"];
        $member->year_joined = $data["Year Joined"];
        $member->dues_2014 = $data["2014 Dues"];
        $member->dues_2013 = $data["2013 Dues"];
        $member->desingated_rep = ($data["Desingated Rep?"] == "1" ? "True" : "False");
//        $member->desingated_rep = $data["Desingated Rep?"];
        $member->new_2013 = ($data["New 2013"] == "yes" ? "True" : "False");
        $member->new_2014 = ($data["New 2014"] == "yes" ? "True" : "False");
        $member->term_expires = $data["Term Expires"];
        $member->board_position = $data["Board Position"];
        $member->business_category = $data["Business Category"];
        $member->paid_2013 = ($data["Paid 2013"] == "yes" ? "True" : "False");
//        $member->business_directory=$data["Size of Company"];
        $member->company = $data["Company"];
        $member->address = $data["Address"];
        $member->city_state_zip = $data["City State Zip"];
        $member->first_name = $data["First Name"];
        $member->last_name = $data["Last Name"];
        $member->job_title = $data["Job Title"];
        $member->email = $data["Email"];
        $member->website = $data["Website"];
        $member->phone = $data["Phone"];
        $member->cell = $data["Cell"];
        $member->fax = $data["Fax"];
        $member->contact = $data["A/P Contact"];
        $member->ap_email = $data["A/P Email"];
        // $member->description = $data["Company Description"];
        $member->description = $data["NEW descriptions (2014)"];
        $member->referred_by = $data["Referred By"];
        $member->pass = $data["pass"];
        try {
            $result = $db->insertObject("jos_membership_directory", $member);
            $id = $db->insertid();
        } catch (Exception $e) {
            JFactory::getApplication()->enqueueMessage('Error on adding new member');
            $id = false;
        }
        return $id;
    }

    public function addMember($data) {
        $db = JFactory::getDbo();
        $member = new stdClass();
        $member->id = $data["Record #"];
        $member->size_of_company = $data["Size of Company"];
        $member->year_joined = $data["Year Joined"];
        $member->dues_2014 = $data["2014 Dues"];
        $member->dues_2013 = $data["2013 Dues"];
        $member->desingated_rep = ($data["Desingated Rep?"] == "1" ? "True" : "False");
//        $member->desingated_rep = $data["Desingated Rep?"];
        $member->new_2013 = ($data["New 2013"] == "yes" ? "True" : "False");
        $member->new_2014 = ($data["New 2014"] == "yes" ? "True" : "False");
        $member->term_expires = $data["Term Expires"];
        $member->board_position = $data["Board Position"];
        $member->business_category = $data["Business Category"];
        $member->paid_2013 = ($data["Paid 2013"] == "yes" ? "True" : "False");
//        $member->business_directory=$data["Size of Company"];
        $member->company = $data["Company"];
        $member->address = $data["Address"];
        $member->city_state_zip = $data["City State Zip"];
        $member->first_name = $data["First Name"];
        $member->last_name = $data["Last Name"];
        $member->job_title = $data["Job Title"];
        $member->email = $data["Email"];
        $member->website = $data["Website"];
        $member->phone = $data["Phone"];
        $member->cell = $data["Cell"];
        $member->fax = $data["Fax"];
        $member->contact = $data["A/P Contact"];
        $member->ap_email = $data["A/P Email"];
        // $member->description = $data["Company Description"];
        $member->description = $data["NEW descriptions (2014)"];
        $member->referred_by = $data["Referred By"];
        $member->pass = $data["pass"];
        try {
            $result = $db->insertObject("jos_membership_directory", $member);
            $id = $data["Record #"];
        } catch (Exception $e) {
            JFactory::getApplication()->enqueueMessage('Error on adding new member');
            $id = false;
        }
        return $id;
    }

    public function isExistedMemberId($id) {
        $db = JFactory::getDbo();
        $query = $db->getQuery(true);
        $query->select('count(*)')->from("jos_membership_directory")->where('id = ' . $db->quote($id));
        $db->setQuery($query);
        if ($result = $db->loadResult()) { //echo $email."-".$result ."<hr/>";
            return true;
        } else {
            return false;
        }
    }

    public function isExistedEmail($email) {
        $db = JFactory::getDbo();
        $query = $db->getQuery(true);
        $query->select('count(*)')->from("#__users")->where('email = ' . $db->quote($email));
        $db->setQuery($query);
        if ($result = $db->loadResult()) {
            return true;
        } else {
            return false;
        }
    }

    public function test() {
        return "hello";
    }

}
